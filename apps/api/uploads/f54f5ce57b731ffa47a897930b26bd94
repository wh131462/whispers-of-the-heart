# 现代博客系统

一个基于React + Flask的现代化博客系统，包含前端展示、管理后台和API服务。

## 项目特色

- 🚀 **现代化技术栈**: React + Flask + SQLAlchemy
- 📱 **响应式设计**: 完美适配桌面和移动设备
- 🔐 **权限管理**: 基于JWT的用户认证和角色权限
- 📝 **Markdown支持**: 支持Markdown格式的文章编写
- 🎨 **主题切换**: 支持深色/浅色主题
- 📊 **统计分析**: 完整的数据统计和分析功能
- 🔧 **易于配置**: 通过配置文件轻松定制
- 🚀 **一键部署**: 支持多种部署方式

## 系统架构

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   前端博客展示    │    │   管理后台界面    │    │   后端API服务    │
│   (React)       │    │   (React)       │    │   (Flask)       │
│                 │    │                 │    │                 │
│ • 文章列表      │    │ • 仪表板        │    │ • RESTful API   │
│ • 文章详情      │    │ • 文章管理      │    │ • JWT认证       │
│ • 分类标签      │    │ • 分类管理      │    │ • 数据库操作    │
│ • 评论系统      │    │ • 用户管理      │    │ • 文件上传      │
│ • 搜索功能      │    │ • 系统设置      │    │ • 权限控制      │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   SQLite数据库   │
                    │                 │
                    │ • 用户表        │
                    │ • 文章表        │
                    │ • 分类表        │
                    │ • 标签表        │
                    │ • 评论表        │
                    │ • 配置表        │
                    └─────────────────┘
```

## 技术栈

### 后端
- **Flask**: Python Web框架
- **SQLAlchemy**: ORM数据库操作
- **Flask-JWT-Extended**: JWT认证
- **Flask-CORS**: 跨域支持
- **SQLite**: 轻量级数据库

### 前端
- **React**: 用户界面框架
- **React Router**: 路由管理
- **Tailwind CSS**: 样式框架
- **Lucide Icons**: 图标库
- **Vite**: 构建工具

### 管理后台
- **React**: 管理界面框架
- **shadcn/ui**: UI组件库
- **React Hook Form**: 表单管理
- **Chart.js**: 数据可视化

## 快速开始

### 环境要求

- Python 3.8+
- Node.js 16+
- npm 或 yarn

### 1. 克隆项目

```bash
git clone <repository-url>
cd blog-system
```

### 2. 后端设置

```bash
# 进入后端目录
cd blog_backend

# 创建虚拟环境
python -m venv venv

# 激活虚拟环境
# Windows
venv\Scripts\activate
# macOS/Linux
source venv/bin/activate

# 安装依赖
pip install -r requirements.txt

# 初始化数据库
python -c "from src.main import app; from src.models.blog_models import db; app.app_context().push(); db.create_all()"

# 创建管理员用户
python -c "
from src.main import app
from src.models.blog_models import db, User
from werkzeug.security import generate_password_hash

with app.app_context():
    admin = User(
        username='admin',
        email='admin@example.com',
        password_hash=generate_password_hash('admin123'),
        display_name='管理员',
        role='admin',
        is_active=True
    )
    db.session.add(admin)
    db.session.commit()
    print('管理员用户创建成功！')
"

# 启动后端服务
python src/main.py
```

### 3. 前端设置

```bash
# 新开终端，进入前端目录
cd blog_frontend

# 安装依赖
npm install

# 启动开发服务器
npm run dev
```

### 4. 管理后台设置

```bash
# 新开终端，进入管理后台目录
cd blog_admin

# 安装依赖
npm install

# 启动开发服务器
npm run dev
```

### 5. 访问系统

- 前端博客: http://localhost:5174
- 管理后台: http://localhost:5175
- API文档: http://localhost:5000/api/v1

### 默认账户

- 用户名: `admin`
- 密码: `admin123`

## 项目结构

```
blog-system/
├── blog_backend/          # 后端API服务
│   ├── src/
│   │   ├── models/        # 数据模型
│   │   ├── routes/        # API路由
│   │   ├── utils/         # 工具函数
│   │   └── main.py        # 应用入口
│   ├── requirements.txt   # Python依赖
│   └── README.md
├── blog_frontend/         # 前端博客展示
│   ├── src/
│   │   ├── components/    # React组件
│   │   ├── pages/         # 页面组件
│   │   ├── lib/           # 工具库
│   │   └── App.jsx        # 应用入口
│   ├── package.json       # Node.js依赖
│   └── README.md
├── blog_admin/            # 管理后台
│   ├── src/
│   │   ├── components/    # React组件
│   │   ├── pages/         # 页面组件
│   │   ├── lib/           # 工具库
│   │   └── App.jsx        # 应用入口
│   ├── package.json       # Node.js依赖
│   └── README.md
├── docs/                  # 文档目录
├── README.md              # 项目说明
└── deploy/                # 部署脚本
```

## 功能特性

### 前端博客功能
- ✅ 文章列表和详情页面
- ✅ 分类和标签筛选
- ✅ 文章搜索功能
- ✅ 评论系统
- ✅ 响应式设计
- ✅ 深色/浅色主题
- ✅ SEO优化

### 管理后台功能
- ✅ 用户认证和权限管理
- ✅ 文章创建、编辑、删除
- ✅ 分类和标签管理
- ✅ 评论审核和管理
- ✅ 媒体文件上传
- ✅ 系统配置管理
- ✅ 数据统计分析
- ✅ 用户管理

### API功能
- ✅ RESTful API设计
- ✅ JWT身份认证
- ✅ 权限控制
- ✅ 数据验证
- ✅ 错误处理
- ✅ API文档

## 配置说明

### 后端配置

编辑 `blog_backend/src/config.py` 文件：

```python
class Config:
    # 数据库配置
    SQLALCHEMY_DATABASE_URI = 'sqlite:///blog.db'
    
    # JWT配置
    JWT_SECRET_KEY = 'your-secret-key'
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=24)
    
    # 文件上传配置
    UPLOAD_FOLDER = 'uploads'
    MAX_CONTENT_LENGTH = 16 * 1024 * 1024  # 16MB
    
    # CORS配置
    CORS_ORIGINS = ['http://localhost:5174', 'http://localhost:5175']
```

### 前端配置

编辑 `blog_frontend/src/lib/api.js` 文件：

```javascript
const API_BASE_URL = 'http://localhost:5000/api/v1';
```

### 管理后台配置

编辑 `blog_admin/src/lib/api.js` 文件：

```javascript
const API_BASE_URL = 'http://localhost:5000/api/v1';
```

## 部署指南

### 生产环境部署

1. **后端部署**
```bash
# 使用Gunicorn部署
pip install gunicorn
gunicorn -w 4 -b 0.0.0.0:5000 src.main:app
```

2. **前端部署**
```bash
# 构建前端
cd blog_frontend
npm run build

# 部署到静态文件服务器
cp -r dist/* /var/www/html/
```

3. **管理后台部署**
```bash
# 构建管理后台
cd blog_admin
npm run build

# 部署到静态文件服务器
cp -r dist/* /var/www/admin/
```

### Docker部署

```bash
# 构建镜像
docker build -t blog-system .

# 运行容器
docker run -p 5000:5000 -p 5174:5174 -p 5175:5175 blog-system
```

## 开发指南

### 添加新功能

1. **后端API**
   - 在 `blog_backend/src/models/` 中定义数据模型
   - 在 `blog_backend/src/routes/` 中添加API路由
   - 更新数据库迁移

2. **前端页面**
   - 在 `blog_frontend/src/pages/` 中添加页面组件
   - 在 `blog_frontend/src/components/` 中添加可复用组件
   - 更新路由配置

3. **管理后台**
   - 在 `blog_admin/src/pages/` 中添加管理页面
   - 在 `blog_admin/src/components/` 中添加管理组件
   - 更新权限控制

### 数据库迁移

```bash
# 生成迁移文件
flask db migrate -m "描述"

# 应用迁移
flask db upgrade
```

## 常见问题

### Q: 如何修改网站标题和描述？
A: 在管理后台的"系统设置"中修改站点配置。

### Q: 如何添加新的用户角色？
A: 在 `blog_backend/src/models/user.py` 中修改角色定义。

### Q: 如何自定义主题样式？
A: 修改 `blog_frontend/src/App.css` 中的CSS变量。

### Q: 如何备份数据？
A: 复制 `blog_backend/blog.db` 文件即可备份所有数据。

## 贡献指南

1. Fork 项目
2. 创建功能分支 (`git checkout -b feature/AmazingFeature`)
3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)
4. 推送到分支 (`git push origin feature/AmazingFeature`)
5. 打开 Pull Request

## 许可证

本项目采用 MIT 许可证 - 查看 [LICENSE](LICENSE) 文件了解详情。

## 支持

如果您在使用过程中遇到问题，请：

1. 查看文档和常见问题
2. 搜索已有的 Issues
3. 创建新的 Issue 描述问题

## 更新日志

### v1.0.0 (2025-09-04)
- ✨ 初始版本发布
- ✨ 完整的博客系统功能
- ✨ 管理后台界面
- ✨ RESTful API
- ✨ 用户认证和权限管理
- ✨ 响应式设计
- ✨ 部署文档

---

**Made with ❤️ using React & Flask**

