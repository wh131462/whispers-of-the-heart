version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: whispers_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: whispers_db
      POSTGRES_USER: whispers_user
      POSTGRES_PASSWORD: whispers_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - whispers_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U whispers_user -d whispers_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: whispers_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - whispers_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 后端 API 服务
  api:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile.api
    container_name: whispers_api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://whispers_user:whispers_password@postgres:5432/whispers_db
      REDIS_URL: redis://:redis_password@redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      PORT: 7777
      CORS_ORIGIN: http://localhost:7777,http://localhost:9999
    ports:
      - "7777:7777"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - whispers_network
    volumes:
      - ./uploads:/app/uploads
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:7777/api/v1/admin/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端 Web 应用
  web:
    build:
      context: ../..
      dockerfile: infra/docker/Dockerfile
    container_name: whispers_web
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    networks:
      - whispers_network
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: whispers_nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    depends_on:
      - web
      - api
    networks:
      - whispers_network
    volumes:
      - ./nginx-proxy.conf:/etc/nginx/nginx.conf:ro
      - ./nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据库管理工具 (可选)
  adminer:
    image: adminer:latest
    container_name: whispers_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    depends_on:
      - postgres
    networks:
      - whispers_network

  # 文件上传服务 (可选)
  minio:
    image: minio/minio:latest
    container_name: whispers_minio
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minio_admin
      MINIO_ROOT_PASSWORD: minio_password
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - whispers_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  whispers_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
